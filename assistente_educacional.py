# -*- coding: utf-8 -*-
"""Assistente-Educacional

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DrxsyD_V3PU-7VQmYLOiwIkRtm-sxxwl
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types
from datetime import date
import textwrap
from IPython.display import display, Markdown
import warnings
warnings.filterwarnings("ignore")

agente_estudos = Agent(
    name="agente_estudos",
    model=MODEL_ID,
    instruction="""
    Você é um assistente educacional inteligente. Sua função é:
    1. Coletar as informações do estudante sobre dificuldades, tempo disponível, metas e início.
    2. Caso o estudante peça, montar um plano de estudos com base nas informações fornecidas.
    3. Se solicitado, gerar questões sobre tópicos indicados. Apresente as questões primeiro, aguarde a resposta do estudante, e só depois forneça o gabarito com explicação.
    4. Finalize a conversa quando o estudante disser que está satisfeito / quiser encerrar ou não apresentar mais solicitações.
    Use linguagem clara, objetiva e com boa formatação (use Markdown quando apropriado).
    """,
    description="Assistente educacional completo"
)

session_service = InMemorySessionService()
session = session_service.create_session(app_name=agente_estudos.name, user_id="user1", session_id="session1")

runner = Runner(agent=agente_estudos, app_name=agente_estudos.name, session_service=session_service)

def call_agent(message_text: str) -> str:
    content = types.Content(role="user", parts=[types.Part(text=message_text)])
    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text is not None:
                    final_response += part.text + "\n"
    return final_response.strip()

print("🤖 Assistente de Estudos: Olá! Sou seu assistente educacional. Vamos começar?\n")
print("📌 Dica: Você pode me pedir para montar um plano de estudos ou gerar questões sobre um tema.\n")

while True:
    user_input = input("Você: ")
    resposta = call_agent(user_input)
    display(Markdown(f"\n🤖 **Assistente de Estudos:**\n\n{resposta}"))

    if any(palavra in resposta.lower() for palavra in ["plano finalizado", "boa sorte", "até mais", "encerrar"]):
        print("🎯 Assistente encerrado. Bons estudos!")
        break

